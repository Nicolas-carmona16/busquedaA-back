name: CI/CD Pipeline
on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs:
  tests:
    name: Unit tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: vueloudea
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v1

      # Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      # Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      # Initialize Database
      - name: Initialize Database
        run: |
          psql -h localhost -U postgres -d vueloudea -f ./init.sql  # Asegúrate de que la ruta sea correcta
        env:
          PGPASSWORD: root

      # Cache Maven packages
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Run Unit Tests
      - name: Run Tests
        run: mvn -B test

  sonarcloud:
    name: SonarCloud Analysis
    needs: tests
    if: always()  # Esto asegura que el análisis se ejecute sin importar el resultado de 'tests'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      # Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      # Cache Maven packages
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # SonarCloud Scan
      - name: SonarCloud Scan
        run: mvn -B org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.1.2184:sonar \
          -Dsonar.organization=your-organization-key \
          -Dsonar.projectKey=your-project-key \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
